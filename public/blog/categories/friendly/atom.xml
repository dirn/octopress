<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Friendly | Andy Dirnberger]]></title>
  <link href="http://andydirnberger.com/blog/categories/friendly/atom.xml" rel="self"/>
  <link href="http://andydirnberger.com/"/>
  <updated>2012-08-04T01:04:23-04:00</updated>
  <id>http://andydirnberger.com/</id>
  <author>
    <name><![CDATA[Andy Dirnberger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Switches: Friendly Python Command Line Scripts]]></title>
    <link href="http://andydirnberger.com/blog/2012/06/10/switches-friendly-python-command-line-scripts/"/>
    <updated>2012-06-10T20:49:00-04:00</updated>
    <id>http://andydirnberger.com/blog/2012/06/10/switches-friendly-python-command-line-scripts</id>
    <content type="html"><![CDATA[<p><code>argparse</code> is an awesome module. It can do a lot of really cool things.
Unfortunately it requires a lot of boilerplate to set up all of the commands
and any arguments associated with them. Plus, once you're done with all of
that, you still need a way to tie each of those commands to some action in
your script.</p>

<!-- more -->


<p>Switches is a Python module that aims to make the whole process easier. It
uses the code you're already writing to cut out the boilerplate.</p>

<p>``` python Add a command
@command
def spam():</p>

<pre><code>"""This function prints 'eggs'"""
print 'eggs'
</code></pre>

<p>```</p>

<p>This is all the code that's needed to add a command to your script called
<code>spam</code>. This command doesn't do a whole lot, though, and odds are you're going
to want to add a command that can take some arguments.</p>

<p>``` python Add a command with an argument</p>

<h1>Positional argument</h1>

<p>@command
def spam(eggs):</p>

<pre><code>"""This function prints the value of eggs"""
print eggs
</code></pre>

<h1>Optional arguments</h1>

<p>@command
def eggs(spam='spam'):</p>

<pre><code>"""This function prints the value of spam"""
print spam
</code></pre>

<p>```</p>

<p>Once all of your commands have been written, invoking the whole thing only
requires one additional line, a call to <code>commandline()</code>. <code>commandline()</code> takes
one optional (and recommended) parameter, <code>description</code>; it will give the
script a nice summary when users passing in the <code>--help</code> argument.</p>

<p><div><script src='https://gist.github.com/2908622.js?file='></script>
<noscript><pre><code>&quot;&quot;&quot;Build a script with Switches&quot;&quot;&quot;

from switches import command, commandline


@command
def spam(eggs):
    &quot;&quot;&quot;This function prints the value of eggs&quot;&quot;&quot;
    print eggs



@command
def eggs(spam='spam'):
    &quot;&quot;&quot;This function prints the value of spam&quot;&quot;&quot;
    print spam


if __name__ == '__main__':
    commandline(__doc__)
</code></pre></noscript></div>
</p>

<p>Check out the documentation on
<a href="http://readthedocs.org/docs/switches/en/latest/">Read the Docs</a>
or get started with <code>pip install switches</code> or
<a href="https://github.com/dirn/switches">Fork it on GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When.py: Friendly Python Dates]]></title>
    <link href="http://andydirnberger.com/blog/2012/05/24/whenpy-friendly-dates/"/>
    <updated>2012-05-24T14:26:00-04:00</updated>
    <id>http://andydirnberger.com/blog/2012/05/24/whenpy-friendly-dates</id>
    <content type="html"><![CDATA[<p>Working with date and times in Python is not a fun task, but it's something
most people have to deal with.</p>

<!-- more -->


<p>To get the current date and time you go through a few different submodules:</p>

<p>``` python Get current date and time</p>

<blockquote><blockquote><blockquote><p>from datetime import date
date.today()
datetime.date(2012, 5, 24)</p>

<p>from datetime import datetime
datetime.now()  # local time
datetime.datetime(2012, 5, 24, 14, 3, 25, 98829)
datetime.utcnow()  # UTC
datetime.datetime(2012, 5, 24, 18, 3, 25, 99288)</p>

<p>datetime.time(datetime.now())
datetime.time(14, 3, 25, 100212)
```</p></blockquote></blockquote></blockquote>

<p>Trying to calculate a new <code>datetime</code> from an existing one requires introducing
another submodule:</p>

<p>``` python Calculate new datetimes</p>

<blockquote><blockquote><blockquote><p>from datetime import datetime, timedelta
datetime.now() + timedelta(days=1)
datetime.datetime(2012, 5, 25, 14, 3, 41, 721367)
datetime.now() + timedelta(weeks=2, hours=-3)
datetime.datetime(2012, 6, 7, 11, 3, 41, 722905)
```</p></blockquote></blockquote></blockquote>

<p>If you've ever worked with <code>timedelta</code> objects before, you might have the same
complaint that I do: it only works with definitive amounts of time. Need to add
some number of days? Sure, that's easy. Need to add a week? Go right ahead.
Need to add a month? Hmm, that's too hard, sorry. A year? You're kidding, right?</p>

<p>And forget about trying to change the time zone of a <code>datetime</code>. This isn't
really such a big deal if you're fortunate enough to work with "aware"
datetimes. I spend much of my time working with "naive" objects. For most
people, this probably isn't a big deal either. For me, however, this is a big
deal as I work on a national network of sites providing local content across
four different time zones.</p>

<p>We came up with a solution for this that seemed to work.</p>

<p>``` python First attempt at changing time zones</p>

<blockquote><blockquote><blockquote><p>from datetime import datetime
import pytz</p>

<p>dt = datetime.now()
dt_utc = datetime.utcnow()</p>

<p>eastern = pytz.timezone('America/New_York')</p>

<p>dt
datetime.datetime(2012, 5, 24, 14, 4, 0, 566448)
dt_utc.replace(tzinfo=pytz.UTC).astimezone(eastern).replace(tzinfo=None)
datetime.datetime(2012, 5, 24, 14, 4, 0, 566817)</p>

<p>dt_utc
datetime.datetime(2012, 5, 24, 18, 4, 0, 566817)
dt.replace(tzinfo=eastern).astimezone(pytz.UTC).replace(tzinfo=None)
datetime.datetime(2012, 5, 24, 19, 4, 0, 566448)
```</p></blockquote></blockquote></blockquote>

<p>As you can see, going from UTC to Eastern works just fine. When going in the
other direction, however, an hour is lost.</p>

<p>After some more digging around we came up with a better approach.</p>

<p>``` python Second attempt at changing time zones</p>

<blockquote><blockquote><blockquote><p>from datetime import datetime
import pytz</p>

<p>dt = datetime.now()
dt_utc = datetime.utcnow()</p>

<p>eastern = pytz.timezone('America/New_York')</p>

<p>dt
datetime.datetime(2012, 5, 24, 14, 4, 20, 436153)
pytz.UTC.localize(dt_utc).astimezone(eastern).replace(tzinfo=None)
datetime.datetime(2012, 5, 24, 14, 4, 20, 436485)</p>

<p>dt_utc
datetime.datetime(2012, 5, 24, 18, 4, 20, 436485)
eastern.localize(dt).astimezone(pytz.UTC).replace(tzinfo=None)
datetime.datetime(2012, 5, 24, 18, 4, 20, 436153)
```</p></blockquote></blockquote></blockquote>

<p>This new method managed to correctly switch between time zones. But that's a
lot of somewhat awkward code to have to type out. Sure a function can be created
to reduce a lot of the code--we called ours <code>convert_timezone</code>--but still,
that's yet another module that needs to be imported.</p>

<p>Why do we need to import all of these different modules to perform such
commonplace tasks? Why not have just one module that covers everything? That's
where When.py comes in.</p>

<p>Here's how to redo all of the above code:</p>

<p>``` python When.py</p>

<blockquote><blockquote><blockquote><p>import when</p>

<p>when.today()  # date.today()
datetime.date(2012, 5, 24)
when.now()  # datetime.now()
datetime.datetime(2012, 5, 24, 14, 4, 37, 64295)
when.now(utc=True)  # datetime.utcnow()
datetime.datetime(2012, 5, 24, 18, 4, 37, 64796)</p>

<p>when.future(years=1)  # datetime.now() + timedelta(???)
datetime.datetime(2013, 5, 24, 14, 4, 37, 65610)
when.past(months=2)  # datetime.now() - timedelta(???)
datetime.datetime(2012, 3, 24, 14, 4, 37, 66268)</p>

<h1>convert_timezone(...)</h1>

<p>... when.shift(when.now(utc=True), from_tz='UTC', to_tz='America/New_York')
datetime.datetime(2012, 5, 24, 14, 4, 37, 67562)
```</p></blockquote></blockquote></blockquote>

<p>Check out the documentation on
<a href="http://readthedocs.org/docs/whenpy/en/latest/">Read the Docs</a>
or get started with <code>pip install whenpy</code> or
<a href="https://github.com/dirn/when.py">Fork it on GitHub</a></p>
]]></content>
  </entry>
  
</feed>
